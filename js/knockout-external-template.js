(function ($, undefined) { var inProgress = {}; $.trafficCop = function (url, options) { var reqOptions = url, key; arguments.length === 2 && (reqOptions = $.extend(!0, options, { url: url })), key = JSON.stringify(reqOptions); if (key in inProgress) for (i in { success: 1, error: 1, complete: 1 }) inProgress[key][i](reqOptions[i]); else inProgress[key] = $.ajax(reqOptions).always(function () { delete inProgress[key] }); return inProgress[key] } })(jQuery), function ($, global, undefined) { var hashStorage = { templates: {}, storeTemplate: function (templateId, templateContent) { this.templates[templateId] = templateContent }, getTemplate: function (templateId) { return this.templates[templateId] }, purge: function () { this.templates = {} } }, scriptStorage = { templateIds: [], storeTemplate: function (templateId, templateContent) { var node = document.getElementById(templateId); node === null && (this.templateIds.push(templateId), node = document.createElement("script"), node.type = "text/html", node.id = templateId, document.body.appendChild(node)), node.text = templateContent }, getTemplate: function (templateId) { return document.getElementById(templateId) }, purge: function () { for (var i = 0; i < this.templateIds.length; i++) document.body.removeChild(document.getElementById(this.templateIds[i])); this.templateIds = [] } }, errorHtml = "<div class='infuser-error'>The template <a href='{TEMPLATEURL}'>{TEMPLATEID}</a> could not be loaded. {STATUS}</div>", returnErrorTemplate = function (status, templateId, templatePath) { return errorHtml.replace("{STATUS}", status).replace("{TEMPLATEID}", templateId).replace("{TEMPLATEURL}", templatePath) }, errors = [], helpers = { getTemplatePath: function (templateOptions) { var templateFile = templateOptions.templatePrefix + templateOptions.templateId + templateOptions.templateSuffix; return templateOptions.templateUrl === undefined || templateOptions.templateUrl === "" ? templateFile : templateOptions.templateUrl + "/" + templateFile }, templateGetSuccess: function (templateId, callback) { return function (response) { infuser.store.storeTemplate(templateId, response), callback(infuser.store.getTemplate(templateId)) } }, templateGetError: function (templateId, templatePath, callback) { return function (exception) { $.inArray(templateId, errors) === -1 && errors.push(templateId); var templateHtml = returnErrorTemplate("HTTP Status code: " + exception.status, templateId, templatePath); infuser.store.storeTemplate(templateId, templateHtml), callback(infuser.store.getTemplate(templateId)) } }, getAjaxOptions: function (templateOptions) { } }, infuserOptions = ["target", "loadingTemplate", "postRender", "preRender", "render", "bindingInstruction", "useLoadingTemplate", "model", "templateUrl", "templateSuffix", "templatePrefix", ""], infuser = { storageOptions: { hash: hashStorage, script: scriptStorage }, store: hashStorage, defaults: { templateUrl: "", templateSuffix: ".cshtml", templatePrefix: "", ajax: { async: !0, dataType: "html", type: "GET" }, target: function (templateId) { return "#" + templateId }, loadingTemplate: { content: '<div class="infuser-loading">Loading...</div>', transitionIn: function (target, content) { var tgt = $(target); tgt.hide(), tgt.html(content), tgt.fadeIn() }, transitionOut: function (target) { $(target).html("") } }, postRender: function (targetElement) { }, preRender: function (targetElement, template) { }, render: function (target, template) { var tgt = $(target); tgt.children().length === 0 ? tgt.append($(template)) : tgt.children().replaceWith($(template)) }, bindingInstruction: function (template, model) { return template }, useLoadingTemplate: !0 }, get: function (options, callback) { var templateOptions = $.extend({}, infuser.defaults, typeof options == "object" ? options : { templateId: options }), template; templateOptions.ajax.url = helpers.getTemplatePath(templateOptions), template = infuser.store.getTemplate(templateOptions.ajax.url), !template || $.inArray(templateOptions.ajax.url, errors) !== -1 ? (templateOptions.ajax.success = helpers.templateGetSuccess(templateOptions.ajax.url, callback), templateOptions.ajax.error = helpers.templateGetError(templateOptions.templateId, templateOptions.ajax.url, callback), $.trafficCop(templateOptions.ajax)) : callback(template) }, getSync: function (options) { var templateOptions = $.extend({}, infuser.defaults, typeof options == "object" ? options : { templateId: options }, { ajax: { async: !1 } }), template, templateHtml; templateOptions.ajax.url = helpers.getTemplatePath(templateOptions), template = infuser.store.getTemplate(templateOptions.ajax.url); if (!template || $.inArray(templateOptions.ajax.url, errors) !== -1) templateHtml = null, templateOptions.ajax.success = function (response) { templateHtml = response }, templateOptions.ajax.error = function (exception) { $.inArray(templateOptions.ajax.url) === -1 && errors.push(templateOptions.ajax.url), templateHtml = returnErrorTemplate("HTTP Status code: exception.status", templateOptions.templateId, templateOptions.ajax.url) }, $.ajax(templateOptions.ajax), templateHtml === null ? templateHtml = returnErrorTemplate("An unknown error occurred.", templateOptions.templateId, templateOptions.ajax.url) : (infuser.store.storeTemplate(templateOptions.ajax.url, templateHtml), template = infuser.store.getTemplate(templateOptions.ajax.url)); return template }, infuse: function (templateId, renderOptions) { var templateOptions = $.extend({}, infuser.defaults, typeof templateId == "object" ? templateId : renderOptions, typeof templateId == "string" ? { templateId: templateId } : undefined), targetElement = typeof templateOptions.target == "function" ? templateOptions.target(templateId) : templateOptions.target; templateOptions.useLoadingTemplate && templateOptions.loadingTemplate.transitionIn(targetElement, templateOptions.loadingTemplate.content), infuser.get(templateOptions, function (template) { var _template = template; templateOptions.preRender(targetElement, _template), _template = templateOptions.bindingInstruction(_template, templateOptions.model), templateOptions.useLoadingTemplate && templateOptions.loadingTemplate.transitionOut(targetElement), templateOptions.render(targetElement, _template), templateOptions.postRender(targetElement) }) } }; global.infuser = infuser }(jQuery, window), function (global, ko, jQuery, infuser, undefined) { var ExternalTemplateSource = function (templateId, options) { var self = this, origAfterRender; self.templateId = templateId, self.loaded = !1, self.template = ko.observable(infuser.defaults.useLoadingTemplate ? infuser.defaults.loadingTemplate.content : undefined), self.template.data = {}, self.options = ko.utils.extend({}, options), self.options.templateId = templateId, self.options && self.options.afterRender && (origAfterRender = self.options.afterRender, self.options.afterRender = function () { self.loaded && origAfterRender.apply(self.options, arguments) }) }; ko.utils.extend(ExternalTemplateSource.prototype, { data: function (key, value) { if (arguments.length === 1) return key === "precompiled" && this.template(), this.template.data[key]; this.template.data[key] = value }, text: function (value) { this.loaded || this.getTemplate(); if (arguments.length === 0) return this.template(); this.template(arguments[0]) }, getTemplate: function () { var self = this; infuser.get(self.options, function (tmpl) { self.data("precompiled", null), self.template(tmpl), self.loaded = !0 }) } }); var KoExternalTemplateEngine = function (koEngineType) { var engine = koEngineType ? new koEngineType : new ko.nativeTemplateEngine; return engine.templates = {}, engine.makeTemplateSource = function (template, bindingContext, options) { if (typeof template == "string") { var elem = document.getElementById(template); return elem ? new ko.templateSources.domElement(elem) : (engine.templates[template] || (engine.templates[template] = new ExternalTemplateSource(template, options)), engine.templates[template]) } if (template.nodeType == 1 || template.nodeType == 8) return new ko.templateSources.anonymousTemplate(template) }, engine.renderTemplate = function (template, bindingContext, options) { var templateSource = engine.makeTemplateSource(template, bindingContext, options); return engine.renderTemplateSource(templateSource, bindingContext, options) }, engine }; ko.KoExternalTemplateEngine = KoExternalTemplateEngine, jQuery.tmpl && jQuery.tmpl.tag.tmpl.open.toString().indexOf("__") >= 0 ? ko.setTemplateEngine(new KoExternalTemplateEngine(ko.jqueryTmplTemplateEngine)) : ko.setTemplateEngine(new KoExternalTemplateEngine) }(window, ko, jQuery, infuser)
/*! knockout-bootstrap version: 0.2.0
*  2013-03-04
*  Author: Bill Pullen
*  Website: http://billpull.github.com/knockout-bootstrap
*  MIT License http://www.opensource.org/licenses/mit-license.php
*/
function s4() { return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1) } function guid() { return s4() + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + s4() + s4() } (function (t) { t.fn.outerHtml = function () { if (0 == this.length) return !1; var e = this[0], n = e.tagName.toLowerCase(); if (e.outerHTML) return e.outerHTML; var o = t.map(e.attributes, function (t) { return t.name + '="' + t.value + '"' }); return "<" + n + (o.length > 0 ? " " + o.join(" ") : "") + ">" + e.innerHTML + "</" + n + ">" } })(jQuery), ko.bindingHandlers.typeahead = { init: function (t, e) { var n = $(t), o = ko.utils.unwrapObservable(e()); n.attr("autocomplete", "off").typeahead({ source: o }) } }, ko.bindingHandlers.progress = { init: function (t, e, n, o) { var i = $(t), r = $("<div/>", { "class": "bar", "data-bind": "style: { width:" + e() + " }" }); i.attr("id", guid()).addClass("progress progress-info").append(r), ko.applyBindingsToDescendants(o, i[0]) } }, ko.bindingHandlers.alert = { init: function (t, e) { var n = $(t), o = ko.utils.unwrapObservable(e()), i = $("<button/>", { type: "button", "class": "close", "data-dismiss": "alert" }).html("&times;"), r = $("<p/>").html(o.message); n.addClass("alert alert-" + o.priority).append(i).append(r) } }, ko.bindingHandlers.tooltip = { init: function (t, e) { var n = ko.utils.unwrapObservable(e()), o = n.title, i = n.placement, r = n.trigger, s = { title: o }; ko.utils.extend(s, ko.bindingHandlers.tooltip.options), i && (s.placement = i), r && (s.trigger = r), $(t).tooltip(s) }, options: { placement: "top", trigger: "hover" , container:"body" } }, ko.bindingHandlers.popover = { init: function (t, e, n, o, i) { var r = ko.utils.unwrapObservable(e()), s = r.title, a = r.template, l = "click"; r.trigger && (l = r.trigger), "hover" === l ? l = "mouseenter mouseleave" : "focus" === l && (l = "focus blur"); var p = r.placement, d = $("#" + a).html(), u = guid(), c = "ko-bs-popover-" + u, g = i.createChildContext(o), v = $("<div/>", { "class": "ko-popover", id: c }).html(d); options = { content: $(v[0]).outerHtml(), title: s }, p && (options.placement = p); var m = $.extend({}, ko.bindingHandlers.popover.options, options); return $(t).bind(l, function () { var t = "show", e = $(this); "click" !== l && (t = "toggle"), e.popover(m).popover(t); var n = $("#" + c); $(".ko-popover").not(n).parents(".popover").remove(), $("#" + c).is(":visible") && ko.applyBindingsToDescendants(g, $("#" + c)[0]), $(document).on("click", '[data-dismiss="popover"]', function () { e.popover("hide") }) }), { controlsDescendantBindings: !0 } }, options: { placement: "right", title: "", html: !0, content: "", trigger: "manual" } };
